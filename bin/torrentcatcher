#!/usr/bin/env python
import argparse
import getpass
import os
import re
import sqlite3 as lite

from os import mkdir, path
from torrentcatcher import torrentcatcher

def setup(tc):
    config = tc.configreader()
    print "Starting setup..."
    hostname = raw_input("Transmission-remote host [localhost]: ")
    if not hostname.strip():
        hostname = "localhost"
    port = raw_input("Transmission-remote port [9091]: ")
    if not port.strip():
        port = "9091"
    auth_resp = raw_input("Requires authentication [y/N]: ")
    if not auth_resp.strip():
        auth = False
    if auth_resp.lower().strip() == "y":
        auth = True
        user = raw_input("Username: ")
        password = getpass.getpass("Password: ")
    elif auth_resp.lower().strip() == "n":
        auth = False
    else:
        auth = False
    downloads = raw_input("Download directory: ")
    new_feed = raw_input("Add a feed now? [y/N]: ")
    if new_feed.lower().strip() == "y":
        new_feed = True
        feed_name = raw_input("Enter name for new feed: ")
        feed_url = raw_input("URL for first feed: ")
        feed_tag = raw_input("RSS tag for torrent or magnet link: ")
        feed_tag = feed_tag.lower().replace(":", "_")
        if feed_tag == "":
        	feed_tag = "link"
    if hostname:
        config['hostname'] = hostname
    if port:
        config['port'] = port
    if auth:
        config['require_auth'] = True
        config['username'] = user
        config['password'] = password
    config['download_directory'] = downloads
    print "Saving configuration..."
    if new_feed:
        tc.addfeed(feed_name, feed_url, tag=feed_tag)
    config.write()
    print "Setup complete!"

def update(database):
    con = lite.connect(database)
    cur = con.cursor()
    try:
        cur.execute('SELECT b FROM info WHERE a="version"')
        version = cur.fetchall()[0][0]
    except:
        cur.execute(
                'CREATE TABLE IF NOT EXISTS info(a,b)'
            )
        cur.execute('INSERT INTO info(a,b) VALUES ("version", "1.0.0")')
        con.commit()
        version = "1.0.0"
    if version == "1.0.0":
        print "Database needs to be updated"
        print "Please enter the RSS tag name for the magnet or torrent link location for each feed (defaults to 'link')" 
        cur.execute('SELECT * FROM feeds')
        feeds = cur.fetchall()
        cur.execute("CREATE TABLE IF NOT EXISTS hold(name, url, tag)")
        con.commit()
        for each in feeds:
            x,name,url = each
            print name + " at " +url
            tag = raw_input("RSS tag: ")
            tag = tag.lower()
            if tag == "":
            	tag = "link"
            cur.execute('INSERT INTO hold(name, url, tag) VALUES (?,?,?)',
                        (name, url, tag))
        con.commit()
        cur.execute('DROP TABLE feeds')
        cur.execute((
                'CREATE TABLE IF NOT EXISTS feeds(id INTEGER PRIMARY KEY, '
                'name TEXT, url TEXT, tag TEXT);'
            ))
        cur.execute('SELECT * FROM hold')
        hold = cur.fetchall()
        for each in hold:
            name,url,tag = each
            cur.execute(
                    'INSERT INTO feeds(name, url, tag) VALUES(?,?,?)',
                    (name, url, tag)
                )
        con.commit()
        cur.execute('DROP TABLE hold')
        cur.execute('UPDATE info SET b="3.1.0" WHERE a="version"')
        con.commit()
		

def main():
    # Sets the location of torrentcatcher files
    homeFolder = os.environ['HOME']
    dataPath = path.join(homeFolder, '.torrentcatcher')
    log = path.join(dataPath, 'torrentcatcher.log')
    config = path.join(dataPath, 'trconfig')
    database = path.join(dataPath, 'torcatch.db')
    # Creates data directory for config file, database, and log file
    if not path.isdir(dataPath):
        mkdir(dataPath)
    # Parsing out arguments for command line input
    parser = argparse.ArgumentParser(prog='torrentcatcher')
    parser.add_argument(
        '-a',
        '--archive',
        nargs='+',
        metavar=('all', 'ID'),
        help=("Moves selected torrents to the archive. Using the argument "
              "'all' will move all currently queued torrents to the archive. "
              "Use the '--list' option to see IDs.")
    )
    parser.add_argument(
        '-C',
        nargs=1,
        metavar='<path to trconfig file>',
        help="Override default config file location."
    )
    parser.add_argument(
        '-d',
        '--download',
        nargs='+',
        metavar=('all', 'ID'),
        help=("Moves selected torrents to Transmission. Using the argument "
              "'all' will move all currently queued torrents to Transmission. "
              "Use the '--list' option to see IDs.")
    )
    parser.add_argument(
        '-D',
        nargs=1,
        metavar='<path to database>',
        help="Overrides default database location."
    )
    parser.add_argument(
        '-f',
        '--add-feed',
        nargs=3,
        metavar=('<name>', '<url>', '<RSS tag>'),
        help="Adds given feed to the database."
    )
    parser.add_argument(
        '-F',
        '--feed',
        help=("Checks all feeds for new torrents to add to the queue. DOES "
              "NOT SEND TO TRANSMISSION."),
        action="store_true"
    )
    parser.add_argument(
        '-l',
        '--list',
        nargs=1,
        choices=['queue', 'archive', 'feeds'],
        help="Lists all items for given category."
    )
    parser.add_argument(
        '-L',
        nargs=1,
        metavar='<path to log file>',
        help="Choose location for log output."
    )
    parser.add_argument(
        '-q',
        '--queue',
        nargs='+',
        metavar=('all', 'ID'),
        help=("Moves selected torrents to the queue. Using the argument 'all' "
              "will move all archived torrents to the queue. Use the "
              "'--list' option to see IDs.")
    )
    parser.add_argument(
        '-Q',
        '--quiet',
        help="Suppresses output.",
        action="store_true"
    )
    parser.add_argument(
        '--search',
        nargs=1,
        choices=['name', 'source', 'id'],
        help=("Search archive and queue for given query. Can search by name, "
              "source, or ID number.")
    )
    parser.add_argument(
        '--setup',
        help="Sets up the database and config in the default location.",
        action="store_true"
    )
    parser.add_argument(
        '--version',
        action='version',
        version='%(prog)s 3.1.0'
    )
    args = parser.parse_args()
    # Override default file locations
    if args.C:
        config = args.C
    if args.D:
        database = args.D
    if args.L:
        database = args.L
    # Turns quiet mode off and on
    quiet = args.quiet
    # Check if database needs updating
    if not args.setup:
    	update(database)
    # Initialize Torrentcatcher class
    tc = torrentcatcher.TorrentCatcher(
        trconf=config,
        trlog=log,
        trquiet=quiet,
        trdb=database
    )
    # Create the configuration file if it does not exist
    tc.configreader()
    # Interprets arguments to their respective functions
    argument = False
    if args.archive:
        argument = True
        tc.archive(args.archive)
    if args.download:
        argument = True
        tc.download(args.download)
    if args.add_feed:
        argument = True
        tag = args.add_feed[2].lower().replace(':', '_')
        tc.addfeed(args.add_feed[0], args.add_feed[1],)
    if args.feed:
        argument = True
        tc.logger.info(
            '[FEED ONLY] Checking feeds for new torrents to queue')
        tc.feeder()
    if args.list:
        argument = True
        tc.lister(args.list[0])
    if args.queue:
        argument = True
        tc.queue(args.queue)
    if args.search:
        argument = True
        query = raw_input('Enter query: ')
        tc.torsearch(args.search[0], query)
    if args.setup:
        argument = True
        print 'Setting up File locations...'
        setup(tc)
    if not argument:
        tc.torrentcatcher()

if __name__ == '__main__':
    main()
